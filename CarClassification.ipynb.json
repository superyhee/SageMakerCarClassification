{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Car Classification\n",
    "This is a car classificator build using pretrained VGG16 on ImageNet data set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "Setup and authenticate the use of AWS services."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "arn:aws:iam::224142435879:role/service-role/AmazonSageMaker-ExecutionRole-20190524T213832\n",
      "CPU times: user 808 ms, sys: 190 ms, total: 998 ms\n",
      "Wall time: 1.97 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import sagemaker\n",
    "from sagemaker import get_execution_role\n",
    "\n",
    "role = get_execution_role()\n",
    "sess = sagemaker.Session()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "bucket = 'sagemaker' # custom bucket name.\n",
    "prefix = 'car-Detection'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "544295431143.dkr.ecr.ap-southeast-2.amazonaws.com/object-detection:latest\n"
     ]
    }
   ],
   "source": [
    "from sagemaker.amazon.amazon_estimator import get_image_uri\n",
    "\n",
    "training_image = get_image_uri(sess.boto_region_name, 'object-detection', repo_version=\"latest\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "mkdir: cannot create directory ‘car-generated’: File exists\n",
      "mkdir: cannot create directory ‘car-train’: File exists\n",
      "mkdir: cannot create directory ‘car-validation’: File exists\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "#Create folders to store the data and annotation files\n",
    "mkdir car-generated car-train car-train_annotation car-validation car-validation_annotation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting the data\n",
    "The model has been trained on [Cars Dataset from Stanford](http://ai.stanford.edu/~jkrause/cars/car_dataset.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import urllib.request\n",
    "\n",
    "def download(url):\n",
    "    filename = url.split(\"/\")[-1]\n",
    "    if not os.path.exists(filename):\n",
    "        urllib.request.urlretrieve(url, filename)\n",
    "\n",
    "\n",
    "download('http://imagenet.stanford.edu/internal/car196/cars_train.tgz')\n",
    "download('https://ai.stanford.edu/~jkrause/cars/car_devkit.tgz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%bash\n",
    "tar -xzf car_devkit.tgz\n",
    "tar -xzf cars_train.tgz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Processing the data\n",
    "The Amazon SageMaker Object Detection algorithm expects lables to be indexed from 0. It also expects lables to be unique, successive and not skip any integers. For instance, if there are ten classes, the algorithm expects and the labels only be in the set [0,1,2,3,4,5,6,7,8,9].\n",
    "\n",
    "In the car validation set, the labels do not satistify this requirement. Some indices are skipped and the labels start from 1. We therefore need a mapper that will convert this index system to our requirement. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import logging\n",
    "\n",
    "        \n",
    "def readClasses(matFile):   \n",
    "    content = sio.loadmat(matFile)\n",
    "    classes = [(_[0]) for _ in content['class_names'][0]]\n",
    "    return classes    \n",
    "\n",
    "def readAnnos(matFile):   \n",
    "    content = sio.loadmat(matFile)\n",
    "    return content['annotations'][0]\n",
    "\n",
    "def get_class_mapper():\n",
    "    original_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, \n",
    "                     19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, \n",
    "                     36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, \n",
    "                     54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, \n",
    "                     72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, \n",
    "                     90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, \n",
    "                     107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, \n",
    "                     122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, \n",
    "                     137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, \n",
    "                     152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, \n",
    "                     167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, \n",
    "                     182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196]\n",
    "    iter_counter = 0\n",
    "    CLASS = {}\n",
    "    for orig in original_list:\n",
    "        CLASS[orig] = iter_counter\n",
    "        iter_counter += 1\n",
    "    return CLASS\n",
    "\n",
    "\n",
    "fix_index_mapping = get_mapper_fn(get_class_mapper())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_mapper_fn(map):  \n",
    "    def mapper(in_category):\n",
    "        return map[in_category]\n",
    "    return mapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "# get images\n",
    "images=os.listdir('cars_train')\n",
    "for fichier in images[:]: # filelist[:] makes a copy of filelist.\n",
    "    if not(fichier.endswith(\".jpg\")):\n",
    "        images.remove(fichier)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare annotation data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 4568514560 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 19600506880 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2751528960 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2751660032 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:764: UserWarning: Corrupt EXIF data.  Expecting to read 12 bytes but only got 2. \n",
      "  warnings.warn(str(msg))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33555968 bytes but only got 0. Skipping tag 12336\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 1879108644 bytes but only got 0. Skipping tag 2211\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 336338176 bytes but only got 0. Skipping tag 9\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 3234119872 bytes but only got 22752. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 67372548 bytes but only got 0. Skipping tag 67\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2097218051 bytes but only got 0. Skipping tag 1024\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:764: UserWarning: Corrupt EXIF data.  Expecting to read 12 bytes but only got 6. \n",
      "  warnings.warn(str(msg))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 19660800 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 37093376 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 19988480 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:764: UserWarning: Corrupt EXIF data.  Expecting to read 12 bytes but only got 10. \n",
      "  warnings.warn(str(msg))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 99877888 bytes but only got 0. Skipping tag 1029\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 35651584 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 17956864 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 65536 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 65536 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2621440 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 3145728 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 131072 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 10944512 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 11993088 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 30277632 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 16711680 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 37486592 bytes but only got 1128. Skipping tag 4\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 16384000 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 808583168 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2949120 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 285413634 bytes but only got 0. Skipping tag 780\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 6258783368 bytes but only got 0. Skipping tag 27847\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 524288 bytes but only got 0. Skipping tag 2\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2359296 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2883584 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 53477376 bytes but only got 0. Skipping tag 2\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 7340032 bytes but only got 0. Skipping tag 2\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 451411968 bytes but only got 0. Skipping tag 4\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 13107200 bytes but only got 0. Skipping tag 4\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 8716288 bytes but only got 0. Skipping tag 4\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 393216 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 25165824 bytes but only got 0. Skipping tag 4\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 417136640 bytes but only got 7560. Skipping tag 4\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 15269888 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 15794176 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 16384000 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 3368026112 bytes but only got 0. Skipping tag 7\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 18939904 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 19464192 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 19988480 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 20512768 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 21037056 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 21561344 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 22085632 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 327680 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 1572864 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 22609920 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 3300917248 bytes but only got 0. Skipping tag 7\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 52428800 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 39321600 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 23134208 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 23658496 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 24182784 bytes but only got 0. Skipping tag 5\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 196608 bytes but only got 0. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 65536 bytes but only got 922. Skipping tag 3\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:764: UserWarning: Corrupt EXIF data.  Expecting to read 12 bytes but only got 0. \n",
      "  warnings.warn(str(msg))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 1903165441 bytes but only got 0. Skipping tag 1\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 525368 bytes but only got 10800. Skipping tag 58462\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 3846701056 bytes but only got 0. Skipping tag 2\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 196867 bytes but only got 10831. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 7200000 bytes but only got 0. Skipping tag 34464\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 655924 bytes but only got 10831. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 31197188 bytes but only got 0. Skipping tag 1029\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 18481152 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 20054016 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33619968 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 262144 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 375128064 bytes but only got 0. Skipping tag 4\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 14286848 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 356515840 bytes but only got 6120. Skipping tag 4\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 1681981440 bytes but only got 0. Skipping tag 0\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:764: UserWarning: Corrupt EXIF data.  Expecting to read 12 bytes but only got 4. \n",
      "  warnings.warn(str(msg))\n",
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/PIL/TiffImagePlugin.py:747: UserWarning: Possibly corrupt EXIF data.  Expecting to read 512000000 bytes but only got 0. Skipping tag 59392\n",
      "  \" Skipping tag %s\" % (size, len(data), tag))\n"
     ]
    }
   ],
   "source": [
    "from imageio import imread\n",
    "import scipy.io as sio\n",
    "\n",
    "categories = readClasses(\"devkit/cars_meta.mat\")\n",
    "annotations = readAnnos(\"devkit/cars_train_annos.mat\")\n",
    "\n",
    "for img in images :\n",
    "    shape = imread('cars_train/{}'.format(img)).shape\n",
    "    jsonFile = img.split('.')[0]+'.json'\n",
    "    \n",
    "    line = {}\n",
    "    line['file'] = img\n",
    "    line['image_size'] = [{\n",
    "        'width':int(shape[1]),\n",
    "        'height':int(shape[0]),\n",
    "        'depth':3\n",
    "    }]\n",
    "     \n",
    "    line['annotations'] = []\n",
    "    line['categories'] = [] \n",
    "    #print(annotations)\n",
    "    for anno in annotations:\n",
    "         if(anno[5][0]==img):\n",
    "            #print(anno) \n",
    "            line['annotations'].append({\n",
    "                    'class_id':int(fix_index_mapping(anno[4][0][0])),\n",
    "                    'top':int(anno[1][0][0]),\n",
    "                    'left':int(anno[0][0][0]),\n",
    "                    'width':abs(int(anno[2][0][0])- int(anno[0][0][0])),\n",
    "                    'height':abs(int(anno[3][0][0]) -int(anno[1][0][0])),\n",
    "                })\n",
    "            class_name = ''\n",
    "            for ind,cat in enumerate(categories, start=1):\n",
    "                if int(anno[4][0][0]) == ind:\n",
    "                    class_name = str(cat)\n",
    "            assert class_name is not ''\n",
    "            line['categories'].append({\n",
    "                'class_id':int(anno[4][0][0]),\n",
    "                'name':class_name\n",
    "            })\n",
    "   \n",
    "    if line['annotations']:\n",
    "        with open(os.path.join('car-generated', jsonFile),'w') as p:\n",
    "            json.dump(line,p)      \n",
    "         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 8144 images have annotation files.\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "jsons = os.listdir('car-generated')\n",
    "\n",
    "print ('There are {} images have annotation files.'.format(len(jsons)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "metadata": {},
   "outputs": [],
   "source": [
    "import shutil\n",
    "\n",
    "train_jsons = jsons[:6516]\n",
    "val_jsons = jsons[6516:]\n",
    " \n",
    "#Moving training files to the training folders\n",
    "for i in train_jsons:\n",
    "    image_file = './cars_train/'+i.split('.')[0]+'.jpg'\n",
    "    if  os.path.exists(image_file):\n",
    "        shutil.move(image_file, './car-train/')\n",
    "        shutil.move('./car-generated/'+i, './car-train_annotation/')\n",
    "\n",
    "#Moving validation files to the validation folders\n",
    "for i in val_jsons:\n",
    "    image_file = './cars_train/'+i.split('.')[0]+'.jpg'\n",
    "    if  os.path.exists(image_file):\n",
    "        shutil.move(image_file, './car-validation/')\n",
    "        shutil.move('./car-generated/'+i, './car-validation_annotation/')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Upload to S3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 43s, sys: 7.1 s, total: 1min 50s\n",
      "Wall time: 11min 55s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "train_channel = prefix + '/car-train'\n",
    "validation_channel = prefix + '/car-validation'\n",
    "train_annotation_channel = prefix + '/train_annotation'\n",
    "validation_annotation_channel = prefix + '/validation_annotation'\n",
    "\n",
    "sess.upload_data(path='car-train', bucket=bucket, key_prefix=train_channel)\n",
    "sess.upload_data(path='car-validation', bucket=bucket, key_prefix=validation_channel)\n",
    "sess.upload_data(path='car-train_annotation', bucket=bucket, key_prefix=train_annotation_channel)\n",
    "sess.upload_data(path='car-validation_annotation', bucket=bucket, key_prefix=validation_annotation_channel)\n",
    "\n",
    "s3_train_data = 's3://{}/{}'.format(bucket, train_channel)\n",
    "s3_validation_data = 's3://{}/{}'.format(bucket, validation_channel)\n",
    "s3_train_annotation = 's3://{}/{}'.format(bucket, train_annotation_channel)\n",
    "s3_validation_annotation = 's3://{}/{}'.format(bucket, validation_annotation_channel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [],
   "source": [
    "s3_output_location = 's3://{}/{}/output'.format(bucket, prefix)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [],
   "source": [
    "od_model = sagemaker.estimator.Estimator(training_image,\n",
    "                                         role, \n",
    "                                         train_instance_count=1, \n",
    "                                         train_instance_type='ml.p2.8xlarge',\n",
    "                                         train_volume_size = 50,\n",
    "                                         train_max_run = 360000,\n",
    "                                         input_mode = 'File',\n",
    "                                         output_path=s3_output_location,\n",
    "                                         sagemaker_session=sess)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [],
   "source": [
    "od_model.set_hyperparameters(base_network='vgg-16',\n",
    "                             use_pretrained_model=1,\n",
    "                             num_classes=196,\n",
    "                             mini_batch_size=16,\n",
    "                             epochs=10,\n",
    "                             learning_rate=0.001,\n",
    "                             lr_scheduler_step='10',\n",
    "                             lr_scheduler_factor=0.1,\n",
    "                             optimizer='sgd',\n",
    "                             momentum=0.9,\n",
    "                             weight_decay=0.0005,\n",
    "                             overlap_threshold=0.5,\n",
    "                             nms_threshold=0.45,\n",
    "                             image_shape=512,\n",
    "                             label_width=600,\n",
    "                             num_training_samples=6516)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = sagemaker.session.s3_input(s3_train_data, distribution='FullyReplicated', \n",
    "                        content_type='image/jpeg', s3_data_type='S3Prefix')\n",
    "validation_data = sagemaker.session.s3_input(s3_validation_data, distribution='FullyReplicated', \n",
    "                             content_type='image/jpeg', s3_data_type='S3Prefix')\n",
    "train_annotation = sagemaker.session.s3_input(s3_train_annotation, distribution='FullyReplicated', \n",
    "                             content_type='image/jpeg', s3_data_type='S3Prefix')\n",
    "validation_annotation = sagemaker.session.s3_input(s3_validation_annotation, distribution='FullyReplicated', \n",
    "                             content_type='image/jpeg', s3_data_type='S3Prefix')\n",
    "\n",
    "data_channels = {'train': train_data, 'validation': validation_data, \n",
    "                 'train_annotation': train_annotation, 'validation_annotation':validation_annotation}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-06-01 04:13:54 Starting - Starting the training job...\n",
      "2019-06-01 04:13:57 Starting - Launching requested ML instances.........\n",
      "2019-06-01 04:15:30 Starting - Preparing the instances for training......\n",
      "2019-06-01 04:16:33 Downloading - Downloading input data......\n",
      "2019-06-01 04:17:54 Training - Downloading the training image.\n",
      "\u001b[31mDocker entrypoint called with argument(s): train\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:00 INFO 139645855786816] Reading default configuration from /opt/amazon/lib/python2.7/site-packages/algorithm/default-input.json: {u'label_width': u'350', u'early_stopping_min_epochs': u'10', u'epochs': u'30', u'overlap_threshold': u'0.5', u'lr_scheduler_factor': u'0.1', u'_num_kv_servers': u'auto', u'weight_decay': u'0.0005', u'mini_batch_size': u'32', u'use_pretrained_model': u'0', u'freeze_layer_pattern': u'', u'lr_scheduler_step': u'', u'early_stopping': u'False', u'early_stopping_patience': u'5', u'momentum': u'0.9', u'num_training_samples': u'', u'optimizer': u'sgd', u'_tuning_objective_metric': u'', u'early_stopping_tolerance': u'0.0', u'learning_rate': u'0.001', u'kv_store': u'device', u'nms_threshold': u'0.45', u'num_classes': u'', u'base_network': u'vgg-16', u'nms_topk': u'400', u'_kvstore': u'device', u'image_shape': u'300'}\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:00 INFO 139645855786816] Reading provided configuration from /opt/ml/input/config/hyperparameters.json: {u'lr_scheduler_step': u'10', u'weight_decay': u'0.0005', u'mini_batch_size': u'16', u'optimizer': u'sgd', u'base_network': u'vgg-16', u'learning_rate': u'0.001', u'use_pretrained_model': u'1', u'label_width': u'600', u'epochs': u'20', u'overlap_threshold': u'0.5', u'num_training_samples': u'7544', u'num_classes': u'196', u'nms_threshold': u'0.45', u'image_shape': u'512', u'momentum': u'0.9', u'lr_scheduler_factor': u'0.1'}\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:00 INFO 139645855786816] Final configuration: {u'label_width': u'600', u'early_stopping_min_epochs': u'10', u'epochs': u'20', u'overlap_threshold': u'0.5', u'lr_scheduler_factor': u'0.1', u'_num_kv_servers': u'auto', u'weight_decay': u'0.0005', u'mini_batch_size': u'16', u'use_pretrained_model': u'1', u'freeze_layer_pattern': u'', u'lr_scheduler_step': u'10', u'early_stopping': u'False', u'early_stopping_patience': u'5', u'momentum': u'0.9', u'num_training_samples': u'7544', u'optimizer': u'sgd', u'_tuning_objective_metric': u'', u'early_stopping_tolerance': u'0.0', u'learning_rate': u'0.001', u'kv_store': u'device', u'nms_threshold': u'0.45', u'num_classes': u'196', u'base_network': u'vgg-16', u'nms_topk': u'400', u'_kvstore': u'device', u'image_shape': u'512'}\u001b[0m\n",
      "\u001b[31mProcess 1 is a worker.\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:00 INFO 139645855786816] Using default worker.\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:00 INFO 139645855786816] Loaded iterator creator application/x-image for content type ('application/x-image', '1.0')\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:00 INFO 139645855786816] Loaded iterator creator application/x-recordio for content type ('application/x-recordio', '1.0')\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:00 INFO 139645855786816] Loaded iterator creator image/png for content type ('image/png', '1.0')\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:00 INFO 139645855786816] Loaded iterator creator image/jpeg for content type ('image/jpeg', '1.0')\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:02 INFO 139645855786816] nvidia-smi took: 0.0754849910736 secs to identify 8 gpus\u001b[0m\n",
      "\u001b[31mCreating .rec file from /opt/ml/input/data/train/train.lst in /opt/ml/input/data/train\u001b[0m\n",
      "\u001b[31mtime: 0.0100820064545  count: 0\u001b[0m\n",
      "\u001b[31mtime: 1.93220090866  count: 1000\u001b[0m\n",
      "\u001b[31mtime: 1.16169714928  count: 2000\u001b[0m\n",
      "\u001b[31mtime: 1.4277908802  count: 3000\u001b[0m\n",
      "\u001b[31mtime: 1.25525307655  count: 4000\u001b[0m\n",
      "\u001b[31mtime: 1.62180995941  count: 5000\u001b[0m\n",
      "\u001b[31mtime: 1.55934691429  count: 6000\u001b[0m\n",
      "\u001b[31mtime: 1.3348710537  count: 7000\u001b[0m\n",
      "\n",
      "2019-06-01 04:17:58 Training - Training image download completed. Training in progress.\u001b[31mCreating .rec file from /opt/ml/input/data/validation/val.lst in /opt/ml/input/data/validation\u001b[0m\n",
      "\u001b[31mtime: 0.00922584533691  count: 0\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:16 INFO 139645855786816] Number of GPUs being used: 8\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:16 WARNING 139645855786816] Training images are resized to image shape (3, 512, 512)\u001b[0m\n",
      "\u001b[31m[04:18:16] /opt/brazil-pkg-cache/packages/MXNetECL/MXNetECL-master.1426.0/AL2012/generic-flavor/src/src/io/iter_image_det_recordio.cc:283: ImageDetRecordIOParser: /opt/ml/input/data/train/train.rec, use 31 threads for decoding..\u001b[0m\n",
      "\u001b[31m[04:18:16] /opt/brazil-pkg-cache/packages/MXNetECL/MXNetECL-master.1426.0/AL2012/generic-flavor/src/src/io/iter_image_det_recordio.cc:340: ImageDetRecordIOParser: /opt/ml/input/data/train/train.rec, label padding width: 600\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:18 WARNING 139645855786816] Validation images are resized to image shape (3, 512, 512)\u001b[0m\n",
      "\u001b[31m[04:18:18] /opt/brazil-pkg-cache/packages/MXNetECL/MXNetECL-master.1426.0/AL2012/generic-flavor/src/src/io/iter_image_det_recordio.cc:283: ImageDetRecordIOParser: /opt/ml/input/data/validation/val.rec, use 31 threads for decoding..\u001b[0m\n",
      "\u001b[31m[04:18:18] /opt/brazil-pkg-cache/packages/MXNetECL/MXNetECL-master.1426.0/AL2012/generic-flavor/src/src/io/iter_image_det_recordio.cc:340: ImageDetRecordIOParser: /opt/ml/input/data/validation/val.rec, label padding width: 600\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:20 INFO 139645855786816] Creating new state\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:20 INFO 139645855786816] Number of GPUs being used: 8\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:20 INFO 139645855786816] Create Store: device\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:20 INFO 139645855786816] Start training with (gpu(0),gpu(1),gpu(2),gpu(3),gpu(4),gpu(5),gpu(6),gpu(7)) from pretrained model 1\u001b[0m\n",
      "\u001b[31m[04:18:20] /opt/brazil-pkg-cache/packages/MXNetECL/MXNetECL-master.1426.0/AL2012/generic-flavor/src/src/nnvm/legacy_json_util.cc:209: Loading symbol saved by previous version v0.8.0. Attempting to upgrade...\u001b[0m\n",
      "\u001b[31m[04:18:20] /opt/brazil-pkg-cache/packages/MXNetECL/MXNetECL-master.1426.0/AL2012/generic-flavor/src/src/nnvm/legacy_json_util.cc:217: Symbol successfully upgraded!\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:18:21 INFO 139645855786816] done loading checkpoint\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}}, \"EndTime\": 1559362728.572487, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"init_train_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\"}, \"StartTime\": 1559362728.572387}\n",
      "\u001b[0m\n",
      "\u001b[31m[04:18:48] /opt/brazil-pkg-cache/packages/MXNetECL/MXNetECL-master.1426.0/AL2012/generic-flavor/src/src/operator/nn/./cudnn/./cudnn_algoreg-inl.h:97: Running performance tests to find the best convolution algorithm, this can take a while... (setting env variable MXNET_CUDNN_AUTOTUNE_DEFAULT to 0 to disable)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:20:50 INFO 139645855786816] Epoch:    0, batches:    100, num_examples:   1600, 13.2 samples/sec, epoch time so far:  0:02:01.639970\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:22:22 INFO 139645855786816] Epoch:    0, batches:    200, num_examples:   3200, 15.0 samples/sec, epoch time so far:  0:03:33.476828\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:23:52 INFO 139645855786816] Epoch:    0, batches:    300, num_examples:   4800, 15.8 samples/sec, epoch time so far:  0:05:03.550768\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:25:25 INFO 139645855786816] Epoch:    0, batches:    400, num_examples:   6400, 16.1 samples/sec, epoch time so far:  0:06:37.097027\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:26 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:26 INFO 139645855786816] #quality_metric: host=algo-1, epoch=0, batch=472 train cross_entropy <loss>=(3.05321708888)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:26 INFO 139645855786816] #quality_metric: host=algo-1, epoch=0, batch=472 train smooth_l1 <loss>=(0.360966418703)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:26 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:26 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:43 INFO 139645855786816] #quality_metric: host=algo-1, epoch=0, validation mAP <score>=(0.00193254697496)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:43 INFO 139645855786816] Updating the best model with validation-mAP=0.00193254697496\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:44 INFO 139645855786816] Saved checkpoint to \"/opt/ml/model/model_algo_1-0000.params\"\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:26:44 INFO 139645855786816] #progress_metric: host=algo-1, completed 5 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 1, \"sum\": 1.0, \"min\": 1}}, \"EndTime\": 1559363204.118236, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 0}, \"StartTime\": 1559362728.57288}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:28:18 INFO 139645855786816] Epoch:    1, batches:    100, num_examples:   1600, 17.0 samples/sec, epoch time so far:  0:01:34.218795\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:29:41 INFO 139645855786816] Epoch:    1, batches:    200, num_examples:   3200, 18.1 samples/sec, epoch time so far:  0:02:57.264571\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:31:12 INFO 139645855786816] Epoch:    1, batches:    300, num_examples:   4800, 17.9 samples/sec, epoch time so far:  0:04:28.724627\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:32:49 INFO 139645855786816] Epoch:    1, batches:    400, num_examples:   6400, 17.5 samples/sec, epoch time so far:  0:06:05.613133\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:33:55 INFO 139645855786816] #quality_metric: host=algo-1, epoch=1, batch=471 train cross_entropy <loss>=(1.68282397639)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:33:55 INFO 139645855786816] #quality_metric: host=algo-1, epoch=1, batch=471 train smooth_l1 <loss>=(0.125632407626)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:33:55 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:33:56 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:34:11 INFO 139645855786816] #quality_metric: host=algo-1, epoch=1, validation mAP <score>=(0.00246520237908)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:34:11 INFO 139645855786816] Updating the best model with validation-mAP=0.00246520237908\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:34:11 INFO 139645855786816] Saved checkpoint to \"/opt/ml/model/model_algo_1-0000.params\"\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:34:11 INFO 139645855786816] #progress_metric: host=algo-1, completed 10 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 2, \"sum\": 2.0, \"min\": 2}}, \"EndTime\": 1559363651.915182, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 1}, \"StartTime\": 1559363204.11842}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:35:52 INFO 139645855786816] Epoch:    2, batches:    100, num_examples:   1600, 16.0 samples/sec, epoch time so far:  0:01:40.288706\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:37:28 INFO 139645855786816] Epoch:    2, batches:    200, num_examples:   3200, 16.3 samples/sec, epoch time so far:  0:03:16.603944\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:39:05 INFO 139645855786816] Epoch:    2, batches:    300, num_examples:   4800, 16.3 samples/sec, epoch time so far:  0:04:53.923069\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:40:42 INFO 139645855786816] Epoch:    2, batches:    400, num_examples:   6400, 16.4 samples/sec, epoch time so far:  0:06:30.315049\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:41:49 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:41:49 INFO 139645855786816] #quality_metric: host=algo-1, epoch=2, batch=472 train cross_entropy <loss>=(1.62010813534)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:41:49 INFO 139645855786816] #quality_metric: host=algo-1, epoch=2, batch=472 train smooth_l1 <loss>=(0.0871939290241)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:41:49 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:41:49 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:42:06 INFO 139645855786816] #quality_metric: host=algo-1, epoch=2, validation mAP <score>=(0.00364482099097)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:42:06 INFO 139645855786816] Updating the best model with validation-mAP=0.00364482099097\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:42:07 INFO 139645855786816] Saved checkpoint to \"/opt/ml/model/model_algo_1-0000.params\"\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:42:07 INFO 139645855786816] #progress_metric: host=algo-1, completed 15 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 3, \"sum\": 3.0, \"min\": 3}}, \"EndTime\": 1559364127.036426, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 2}, \"StartTime\": 1559363651.915372}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:43:45 INFO 139645855786816] Epoch:    3, batches:    100, num_examples:   1600, 16.2 samples/sec, epoch time so far:  0:01:38.778127\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:45:24 INFO 139645855786816] Epoch:    3, batches:    200, num_examples:   3200, 16.2 samples/sec, epoch time so far:  0:03:17.872584\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:47:03 INFO 139645855786816] Epoch:    3, batches:    300, num_examples:   4800, 16.2 samples/sec, epoch time so far:  0:04:56.342773\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:48:35 INFO 139645855786816] Epoch:    3, batches:    400, num_examples:   6400, 16.5 samples/sec, epoch time so far:  0:06:28.707991\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:49:46 INFO 139645855786816] #quality_metric: host=algo-1, epoch=3, batch=471 train cross_entropy <loss>=(1.58709695657)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:49:46 INFO 139645855786816] #quality_metric: host=algo-1, epoch=3, batch=471 train smooth_l1 <loss>=(0.0714902868393)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:49:46 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:49:47 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:50:03 INFO 139645855786816] #quality_metric: host=algo-1, epoch=3, validation mAP <score>=(0.00416992193517)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:50:03 INFO 139645855786816] Updating the best model with validation-mAP=0.00416992193517\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:50:03 INFO 139645855786816] Saved checkpoint to \"/opt/ml/model/model_algo_1-0000.params\"\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:50:03 INFO 139645855786816] #progress_metric: host=algo-1, completed 20 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 4, \"sum\": 4.0, \"min\": 4}}, \"EndTime\": 1559364603.192866, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 3}, \"StartTime\": 1559364127.036605}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:51:43 INFO 139645855786816] Epoch:    4, batches:    100, num_examples:   1600, 15.9 samples/sec, epoch time so far:  0:01:40.428169\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:53:16 INFO 139645855786816] Epoch:    4, batches:    200, num_examples:   3200, 16.5 samples/sec, epoch time so far:  0:03:13.390136\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:54:48 INFO 139645855786816] Epoch:    4, batches:    300, num_examples:   4800, 16.8 samples/sec, epoch time so far:  0:04:45.495615\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:56:20 INFO 139645855786816] Epoch:    4, batches:    400, num_examples:   6400, 16.9 samples/sec, epoch time so far:  0:06:17.765430\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:57:26 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:57:26 INFO 139645855786816] #quality_metric: host=algo-1, epoch=4, batch=472 train cross_entropy <loss>=(1.55857824352)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:57:26 INFO 139645855786816] #quality_metric: host=algo-1, epoch=4, batch=472 train smooth_l1 <loss>=(0.0605385063503)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:57:26 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:57:27 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:57:44 INFO 139645855786816] #quality_metric: host=algo-1, epoch=4, validation mAP <score>=(0.00345445929089)\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:57:44 INFO 139645855786816] #progress_metric: host=algo-1, completed 25 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 5, \"sum\": 5.0, \"min\": 5}}, \"EndTime\": 1559365064.584939, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 4}, \"StartTime\": 1559364603.193057}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 04:59:25 INFO 139645855786816] Epoch:    5, batches:    100, num_examples:   1600, 15.9 samples/sec, epoch time so far:  0:01:40.946166\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:01:05 INFO 139645855786816] Epoch:    5, batches:    200, num_examples:   3200, 16.0 samples/sec, epoch time so far:  0:03:20.557420\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:02:41 INFO 139645855786816] Epoch:    5, batches:    300, num_examples:   4800, 16.1 samples/sec, epoch time so far:  0:04:57.334403\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:04:17 INFO 139645855786816] Epoch:    5, batches:    400, num_examples:   6400, 16.3 samples/sec, epoch time so far:  0:06:32.878653\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:05:26 INFO 139645855786816] #quality_metric: host=algo-1, epoch=5, batch=471 train cross_entropy <loss>=(1.54359550736)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:05:26 INFO 139645855786816] #quality_metric: host=algo-1, epoch=5, batch=471 train smooth_l1 <loss>=(0.0540339842284)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:05:26 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:05:26 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:05:42 INFO 139645855786816] #quality_metric: host=algo-1, epoch=5, validation mAP <score>=(0.00139271991741)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:05:42 INFO 139645855786816] #progress_metric: host=algo-1, completed 30 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 6, \"sum\": 6.0, \"min\": 6}}, \"EndTime\": 1559365542.813997, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 5}, \"StartTime\": 1559365064.585147}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:07:21 INFO 139645855786816] Epoch:    6, batches:    100, num_examples:   1600, 16.2 samples/sec, epoch time so far:  0:01:38.874764\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:08:58 INFO 139645855786816] Epoch:    6, batches:    200, num_examples:   3200, 16.3 samples/sec, epoch time so far:  0:03:15.879250\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:10:36 INFO 139645855786816] Epoch:    6, batches:    300, num_examples:   4800, 16.4 samples/sec, epoch time so far:  0:04:53.528093\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:12:15 INFO 139645855786816] Epoch:    6, batches:    400, num_examples:   6400, 16.3 samples/sec, epoch time so far:  0:06:33.106875\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:27 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:27 INFO 139645855786816] #quality_metric: host=algo-1, epoch=6, batch=472 train cross_entropy <loss>=(1.53119837642)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:27 INFO 139645855786816] #quality_metric: host=algo-1, epoch=6, batch=472 train smooth_l1 <loss>=(0.0487666069591)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:27 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:28 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:45 INFO 139645855786816] #quality_metric: host=algo-1, epoch=6, validation mAP <score>=(0.004935083928)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:45 INFO 139645855786816] Updating the best model with validation-mAP=0.004935083928\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:45 INFO 139645855786816] Saved checkpoint to \"/opt/ml/model/model_algo_1-0000.params\"\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:13:45 INFO 139645855786816] #progress_metric: host=algo-1, completed 35 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 7, \"sum\": 7.0, \"min\": 7}}, \"EndTime\": 1559366025.441232, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 6}, \"StartTime\": 1559365542.814169}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:15:24 INFO 139645855786816] Epoch:    7, batches:    100, num_examples:   1600, 16.1 samples/sec, epoch time so far:  0:01:39.522087\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:16:59 INFO 139645855786816] Epoch:    7, batches:    200, num_examples:   3200, 16.5 samples/sec, epoch time so far:  0:03:14.319860\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:18:32 INFO 139645855786816] Epoch:    7, batches:    300, num_examples:   4800, 16.7 samples/sec, epoch time so far:  0:04:46.855968\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:20:08 INFO 139645855786816] Epoch:    7, batches:    400, num_examples:   6400, 16.7 samples/sec, epoch time so far:  0:06:23.263371\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:21:12 INFO 139645855786816] #quality_metric: host=algo-1, epoch=7, batch=471 train cross_entropy <loss>=(1.52292356401)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:21:12 INFO 139645855786816] #quality_metric: host=algo-1, epoch=7, batch=471 train smooth_l1 <loss>=(0.0469288700126)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:21:12 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:21:12 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:21:28 INFO 139645855786816] #quality_metric: host=algo-1, epoch=7, validation mAP <score>=(0.0025562711257)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:21:28 INFO 139645855786816] #progress_metric: host=algo-1, completed 40 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 8, \"sum\": 8.0, \"min\": 8}}, \"EndTime\": 1559366488.68212, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 7}, \"StartTime\": 1559366025.441423}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:23:00 INFO 139645855786816] Epoch:    8, batches:    100, num_examples:   1600, 17.4 samples/sec, epoch time so far:  0:01:32.212437\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:24:31 INFO 139645855786816] Epoch:    8, batches:    200, num_examples:   3200, 17.5 samples/sec, epoch time so far:  0:03:03.075383\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:26:06 INFO 139645855786816] Epoch:    8, batches:    300, num_examples:   4800, 17.3 samples/sec, epoch time so far:  0:04:37.420869\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:27:40 INFO 139645855786816] Epoch:    8, batches:    400, num_examples:   6400, 17.2 samples/sec, epoch time so far:  0:06:11.847350\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:28:51 INFO 139645855786816] #quality_metric: host=algo-1, epoch=8, batch=471 train cross_entropy <loss>=(1.51433509346)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:28:51 INFO 139645855786816] #quality_metric: host=algo-1, epoch=8, batch=471 train smooth_l1 <loss>=(0.0443310806002)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:28:51 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:28:51 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:29:09 INFO 139645855786816] #quality_metric: host=algo-1, epoch=8, validation mAP <score>=(0.00228536663244)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:29:09 INFO 139645855786816] #progress_metric: host=algo-1, completed 45 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 9, \"sum\": 9.0, \"min\": 9}}, \"EndTime\": 1559366949.151621, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 8}, \"StartTime\": 1559366488.682327}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:30:45 INFO 139645855786816] Epoch:    9, batches:    100, num_examples:   1600, 16.7 samples/sec, epoch time so far:  0:01:35.966818\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:32:20 INFO 139645855786816] Epoch:    9, batches:    200, num_examples:   3200, 16.7 samples/sec, epoch time so far:  0:03:11.082425\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:33:58 INFO 139645855786816] Epoch:    9, batches:    300, num_examples:   4800, 16.6 samples/sec, epoch time so far:  0:04:49.016378\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:35:34 INFO 139645855786816] Epoch:    9, batches:    400, num_examples:   6400, 16.6 samples/sec, epoch time so far:  0:06:24.919023\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:36:44 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:36:44 INFO 139645855786816] #quality_metric: host=algo-1, epoch=9, batch=472 train cross_entropy <loss>=(1.50760562525)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:36:44 INFO 139645855786816] #quality_metric: host=algo-1, epoch=9, batch=472 train smooth_l1 <loss>=(0.0421470601276)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:36:44 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:36:44 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:37:00 INFO 139645855786816] #quality_metric: host=algo-1, epoch=9, validation mAP <score>=(0.00739420271335)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:37:00 INFO 139645855786816] Updating the best model with validation-mAP=0.00739420271335\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:37:00 INFO 139645855786816] Saved checkpoint to \"/opt/ml/model/model_algo_1-0000.params\"\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:37:00 INFO 139645855786816] #progress_metric: host=algo-1, completed 50 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 10, \"sum\": 10.0, \"min\": 10}}, \"EndTime\": 1559367420.765321, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 9}, \"StartTime\": 1559366949.15183}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:38:39 INFO 139645855786816] Epoch:    10, batches:    100, num_examples:   1600, 16.2 samples/sec, epoch time so far:  0:01:39.057919\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:40:16 INFO 139645855786816] Epoch:    10, batches:    200, num_examples:   3200, 16.3 samples/sec, epoch time so far:  0:03:16.233337\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:41:54 INFO 139645855786816] Epoch:    10, batches:    300, num_examples:   4800, 16.4 samples/sec, epoch time so far:  0:04:53.302881\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:43:28 INFO 139645855786816] Epoch:    10, batches:    400, num_examples:   6400, 16.5 samples/sec, epoch time so far:  0:06:27.589856\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:44:36 INFO 139645855786816] #quality_metric: host=algo-1, epoch=10, batch=471 train cross_entropy <loss>=(1.5028918914)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:44:36 INFO 139645855786816] #quality_metric: host=algo-1, epoch=10, batch=471 train smooth_l1 <loss>=(0.0397084306809)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:44:36 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:44:37 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:44:54 INFO 139645855786816] #quality_metric: host=algo-1, epoch=10, validation mAP <score>=(0.00252025541019)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:44:54 INFO 139645855786816] #progress_metric: host=algo-1, completed 55 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 11, \"sum\": 11.0, \"min\": 11}}, \"EndTime\": 1559367894.328778, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 10}, \"StartTime\": 1559367420.765499}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:46:33 INFO 139645855786816] Epoch:    11, batches:    100, num_examples:   1600, 16.1 samples/sec, epoch time so far:  0:01:39.608096\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:48:12 INFO 139645855786816] Epoch:    11, batches:    200, num_examples:   3200, 16.1 samples/sec, epoch time so far:  0:03:18.611939\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:49:47 INFO 139645855786816] Epoch:    11, batches:    300, num_examples:   4800, 16.4 samples/sec, epoch time so far:  0:04:53.227646\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:51:23 INFO 139645855786816] Epoch:    11, batches:    400, num_examples:   6400, 16.4 samples/sec, epoch time so far:  0:06:29.236673\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:52:34 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:52:34 INFO 139645855786816] #quality_metric: host=algo-1, epoch=11, batch=472 train cross_entropy <loss>=(1.5003910134)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:52:34 INFO 139645855786816] #quality_metric: host=algo-1, epoch=11, batch=472 train smooth_l1 <loss>=(0.0397320306204)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:52:34 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:52:34 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:52:50 INFO 139645855786816] #quality_metric: host=algo-1, epoch=11, validation mAP <score>=(0.00277485060436)\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:52:50 INFO 139645855786816] #progress_metric: host=algo-1, completed 60 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 12, \"sum\": 12.0, \"min\": 12}}, \"EndTime\": 1559368370.558499, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 11}, \"StartTime\": 1559367894.328986}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:54:21 INFO 139645855786816] Epoch:    12, batches:    100, num_examples:   1600, 17.6 samples/sec, epoch time so far:  0:01:30.772698\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:55:58 INFO 139645855786816] Epoch:    12, batches:    200, num_examples:   3200, 17.0 samples/sec, epoch time so far:  0:03:08.274851\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:57:36 INFO 139645855786816] Epoch:    12, batches:    300, num_examples:   4800, 16.8 samples/sec, epoch time so far:  0:04:46.423403\u001b[0m\n",
      "\u001b[31m[06/01/2019 05:59:15 INFO 139645855786816] Epoch:    12, batches:    400, num_examples:   6400, 16.6 samples/sec, epoch time so far:  0:06:24.531167\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:00:25 INFO 139645855786816] #quality_metric: host=algo-1, epoch=12, batch=471 train cross_entropy <loss>=(1.49421672917)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:00:25 INFO 139645855786816] #quality_metric: host=algo-1, epoch=12, batch=471 train smooth_l1 <loss>=(0.0378175688943)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:00:25 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:00:25 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:00:42 INFO 139645855786816] #quality_metric: host=algo-1, epoch=12, validation mAP <score>=(0.00408759543998)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:00:42 INFO 139645855786816] #progress_metric: host=algo-1, completed 65 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 13, \"sum\": 13.0, \"min\": 13}}, \"EndTime\": 1559368842.971837, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 12}, \"StartTime\": 1559368370.558676}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:02:23 INFO 139645855786816] Epoch:    13, batches:    100, num_examples:   1600, 15.9 samples/sec, epoch time so far:  0:01:40.918101\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:03:57 INFO 139645855786816] Epoch:    13, batches:    200, num_examples:   3200, 16.4 samples/sec, epoch time so far:  0:03:15.003934\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:05:36 INFO 139645855786816] Epoch:    13, batches:    300, num_examples:   4800, 16.4 samples/sec, epoch time so far:  0:04:53.412501\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:07:14 INFO 139645855786816] Epoch:    13, batches:    400, num_examples:   6400, 16.3 samples/sec, epoch time so far:  0:06:31.834989\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:08:25 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:08:25 INFO 139645855786816] #quality_metric: host=algo-1, epoch=13, batch=472 train cross_entropy <loss>=(1.48644765385)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:08:25 INFO 139645855786816] #quality_metric: host=algo-1, epoch=13, batch=472 train smooth_l1 <loss>=(0.0354302436037)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:08:25 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:08:25 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:08:41 INFO 139645855786816] #quality_metric: host=algo-1, epoch=13, validation mAP <score>=(0.00231787116959)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:08:41 INFO 139645855786816] #progress_metric: host=algo-1, completed 70 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 14, \"sum\": 14.0, \"min\": 14}}, \"EndTime\": 1559369321.312705, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 13}, \"StartTime\": 1559368842.972025}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:10:23 INFO 139645855786816] Epoch:    14, batches:    100, num_examples:   1600, 15.7 samples/sec, epoch time so far:  0:01:42.100321\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:12:00 INFO 139645855786816] Epoch:    14, batches:    200, num_examples:   3200, 16.1 samples/sec, epoch time so far:  0:03:18.827878\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:13:36 INFO 139645855786816] Epoch:    14, batches:    300, num_examples:   4800, 16.3 samples/sec, epoch time so far:  0:04:54.955372\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:15:14 INFO 139645855786816] Epoch:    14, batches:    400, num_examples:   6400, 16.3 samples/sec, epoch time so far:  0:06:32.810250\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:16:24 INFO 139645855786816] #quality_metric: host=algo-1, epoch=14, batch=471 train cross_entropy <loss>=(1.48221309917)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:16:24 INFO 139645855786816] #quality_metric: host=algo-1, epoch=14, batch=471 train smooth_l1 <loss>=(0.0348029363234)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:16:24 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:16:24 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:16:41 INFO 139645855786816] #quality_metric: host=algo-1, epoch=14, validation mAP <score>=(0.0032806203794)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:16:41 INFO 139645855786816] #progress_metric: host=algo-1, completed 75 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 15, \"sum\": 15.0, \"min\": 15}}, \"EndTime\": 1559369801.749074, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 14}, \"StartTime\": 1559369321.312906}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:18:16 INFO 139645855786816] Epoch:    15, batches:    100, num_examples:   1600, 16.9 samples/sec, epoch time so far:  0:01:34.566578\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:19:50 INFO 139645855786816] Epoch:    15, batches:    200, num_examples:   3200, 16.9 samples/sec, epoch time so far:  0:03:09.215954\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:21:26 INFO 139645855786816] Epoch:    15, batches:    300, num_examples:   4800, 16.8 samples/sec, epoch time so far:  0:04:45.094938\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:23:06 INFO 139645855786816] Epoch:    15, batches:    400, num_examples:   6400, 16.6 samples/sec, epoch time so far:  0:06:24.627915\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:24:17 INFO 139645855786816] #quality_metric: host=algo-1, epoch=15, batch=471 train cross_entropy <loss>=(1.47956276658)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:24:17 INFO 139645855786816] #quality_metric: host=algo-1, epoch=15, batch=471 train smooth_l1 <loss>=(0.033788192504)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:24:17 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:24:17 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:24:33 INFO 139645855786816] #quality_metric: host=algo-1, epoch=15, validation mAP <score>=(0.00454518095177)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:24:33 INFO 139645855786816] #progress_metric: host=algo-1, completed 80 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 16, \"sum\": 16.0, \"min\": 16}}, \"EndTime\": 1559370273.146859, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 15}, \"StartTime\": 1559369801.749274}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:26:08 INFO 139645855786816] Epoch:    16, batches:    100, num_examples:   1600, 16.8 samples/sec, epoch time so far:  0:01:35.023875\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:27:40 INFO 139645855786816] Epoch:    16, batches:    200, num_examples:   3200, 17.1 samples/sec, epoch time so far:  0:03:07.437417\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:29:15 INFO 139645855786816] Epoch:    16, batches:    300, num_examples:   4800, 17.0 samples/sec, epoch time so far:  0:04:42.039972\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:30:48 INFO 139645855786816] Epoch:    16, batches:    400, num_examples:   6400, 17.1 samples/sec, epoch time so far:  0:06:15.174234\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:31:55 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:31:55 INFO 139645855786816] #quality_metric: host=algo-1, epoch=16, batch=472 train cross_entropy <loss>=(1.48085281931)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:31:55 INFO 139645855786816] #quality_metric: host=algo-1, epoch=16, batch=472 train smooth_l1 <loss>=(0.0334186244869)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:31:55 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:31:55 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:32:12 INFO 139645855786816] #quality_metric: host=algo-1, epoch=16, validation mAP <score>=(0.00402645443536)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:32:12 INFO 139645855786816] #progress_metric: host=algo-1, completed 85 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 17, \"sum\": 17.0, \"min\": 17}}, \"EndTime\": 1559370732.507283, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 16}, \"StartTime\": 1559370273.147159}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:33:48 INFO 139645855786816] Epoch:    17, batches:    100, num_examples:   1600, 16.6 samples/sec, epoch time so far:  0:01:36.398190\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:35:21 INFO 139645855786816] Epoch:    17, batches:    200, num_examples:   3200, 16.9 samples/sec, epoch time so far:  0:03:09.019933\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:36:57 INFO 139645855786816] Epoch:    17, batches:    300, num_examples:   4800, 16.8 samples/sec, epoch time so far:  0:04:45.019734\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:38:34 INFO 139645855786816] Epoch:    17, batches:    400, num_examples:   6400, 16.8 samples/sec, epoch time so far:  0:06:21.956304\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:39:42 INFO 139645855786816] #quality_metric: host=algo-1, epoch=17, batch=471 train cross_entropy <loss>=(1.47690570831)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:39:42 INFO 139645855786816] #quality_metric: host=algo-1, epoch=17, batch=471 train smooth_l1 <loss>=(0.0330652959868)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:39:42 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:39:43 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:39:59 INFO 139645855786816] #quality_metric: host=algo-1, epoch=17, validation mAP <score>=(0.00900795880396)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:39:59 INFO 139645855786816] Updating the best model with validation-mAP=0.00900795880396\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:39:59 INFO 139645855786816] Saved checkpoint to \"/opt/ml/model/model_algo_1-0000.params\"\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:39:59 INFO 139645855786816] #progress_metric: host=algo-1, completed 90 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 18, \"sum\": 18.0, \"min\": 18}}, \"EndTime\": 1559371199.230336, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 17}, \"StartTime\": 1559370732.507547}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:41:35 INFO 139645855786816] Epoch:    18, batches:    100, num_examples:   1600, 16.7 samples/sec, epoch time so far:  0:01:35.847655\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:43:08 INFO 139645855786816] Epoch:    18, batches:    200, num_examples:   3200, 16.9 samples/sec, epoch time so far:  0:03:09.395305\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:44:43 INFO 139645855786816] Epoch:    18, batches:    300, num_examples:   4800, 16.9 samples/sec, epoch time so far:  0:04:43.915066\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:46:15 INFO 139645855786816] Epoch:    18, batches:    400, num_examples:   6400, 17.0 samples/sec, epoch time so far:  0:06:16.192968\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:47:26 WARNING 139645855786816] Expected number of batches: 471, did not match the number of batches processed: 472. This may happen when some images or annotations are invalid and cannot be parsed. Please check the dataset and ensure it follows the format in the documentation.\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:47:26 INFO 139645855786816] #quality_metric: host=algo-1, epoch=18, batch=472 train cross_entropy <loss>=(1.47152852048)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:47:26 INFO 139645855786816] #quality_metric: host=algo-1, epoch=18, batch=472 train smooth_l1 <loss>=(0.0311853049309)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:47:26 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:47:27 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:47:43 INFO 139645855786816] #quality_metric: host=algo-1, epoch=18, validation mAP <score>=(0.00821291666903)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:47:43 INFO 139645855786816] #progress_metric: host=algo-1, completed 95 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 19, \"sum\": 19.0, \"min\": 19}}, \"EndTime\": 1559371663.999164, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 18}, \"StartTime\": 1559371199.230514}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:49:21 INFO 139645855786816] Epoch:    19, batches:    100, num_examples:   1600, 16.4 samples/sec, epoch time so far:  0:01:37.769841\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:50:55 INFO 139645855786816] Epoch:    19, batches:    200, num_examples:   3200, 16.7 samples/sec, epoch time so far:  0:03:11.622600\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:52:30 INFO 139645855786816] Epoch:    19, batches:    300, num_examples:   4800, 16.7 samples/sec, epoch time so far:  0:04:46.742141\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:54:06 INFO 139645855786816] Epoch:    19, batches:    400, num_examples:   6400, 16.7 samples/sec, epoch time so far:  0:06:22.292426\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:15 INFO 139645855786816] #quality_metric: host=algo-1, epoch=19, batch=471 train cross_entropy <loss>=(1.47122129551)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:15 INFO 139645855786816] #quality_metric: host=algo-1, epoch=19, batch=471 train smooth_l1 <loss>=(0.0308794663793)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:15 INFO 139645855786816] Round of batches complete\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:15 INFO 139645855786816] Updated the metrics\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:31 INFO 139645855786816] #quality_metric: host=algo-1, epoch=19, validation mAP <score>=(0.00723276395242)\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:31 INFO 139645855786816] #progress_metric: host=algo-1, completed 100 % of epochs\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"Max Batches Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Batches Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Number of Records Since Last Reset\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Batches Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Total Records Seen\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Max Records Seen Between Resets\": {\"count\": 1, \"max\": 0, \"sum\": 0.0, \"min\": 0}, \"Reset Count\": {\"count\": 1, \"max\": 20, \"sum\": 20.0, \"min\": 20}}, \"EndTime\": 1559372131.09227, \"Dimensions\": {\"Host\": \"algo-1\", \"Meta\": \"training_data_iter\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\", \"epoch\": 19}, \"StartTime\": 1559371663.999335}\n",
      "\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:31 WARNING 139645855786816] wait_for_all_workers will not sync workers since the kv store is not running distributed\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:31 INFO 139645855786816] Saved checkpoint to \"/opt/ml/model/model_algo_1-0000.params\"\u001b[0m\n",
      "\u001b[31m[06/01/2019 06:55:31 INFO 139645855786816] Test data is not provided.\u001b[0m\n",
      "\u001b[31m#metrics {\"Metrics\": {\"epochs\": {\"count\": 1, \"max\": 20, \"sum\": 20.0, \"min\": 20}, \"totaltime\": {\"count\": 1, \"max\": 9451021.799087524, \"sum\": 9451021.799087524, \"min\": 9451021.799087524}, \"setuptime\": {\"count\": 1, \"max\": 11.207103729248047, \"sum\": 11.207103729248047, \"min\": 11.207103729248047}}, \"EndTime\": 1559372131.742413, \"Dimensions\": {\"Host\": \"algo-1\", \"Operation\": \"training\", \"Algorithm\": \"AWS/Object Detection\"}, \"StartTime\": 1559362680.789602}\n",
      "\u001b[0m\n",
      "\n",
      "2019-06-01 06:55:37 Uploading - Uploading generated training model\n",
      "2019-06-01 06:56:09 Completed - Training job completed\n",
      "Billable seconds: 9577\n"
     ]
    }
   ],
   "source": [
    "od_model.fit(inputs=data_channels, logs=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hosting\n",
    "Once the training is done, we can deploy the trained model as an Amazon SageMaker real-time hosted endpoint."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------------------------------------------------!"
     ]
    }
   ],
   "source": [
    "object_detector = od_model.deploy(initial_instance_count = 1,\n",
    "                                 instance_type = 'ml.m4.xlarge')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inference\n",
    "Now that the trained model is deployed at an endpoint, we can use this endpoint for inference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 638,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2019-06-02 05:53:22--  https://ourautoexpert.com/wp-content/uploads/2012/08/2012-Jaguar-XK-R.jpg\n",
      "Resolving ourautoexpert.com (ourautoexpert.com)... 104.18.47.163, 104.18.46.163\n",
      "Connecting to ourautoexpert.com (ourautoexpert.com)|104.18.47.163|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 45544 (44K) [image/jpeg]\n",
      "Saving to: ‘car.jpg’\n",
      "\n",
      "car.jpg             100%[===================>]  44.48K  --.-KB/s    in 0.002s  \n",
      "\n",
      "2019-06-02 05:53:23 (20.1 MB/s) - ‘car.jpg’ saved [45544/45544]\n",
      "\n",
      "Jaguar XK XKR 2012:0.017368 Chrysler 300 SRT-8 2010:0.014312 Mitsubishi Lancer Sedan 2012:0.012265 Audi V8 Sedan 1994:0.010955 Ferrari FF Coupe 2012:0.010521 "
     ]
    }
   ],
   "source": [
    "!wget -O car.jpg https://afox.mobi/test/11111.jpg\n",
    "file_name = 'car.jpg'\n",
    "\n",
    "with open(file_name, 'rb') as image:\n",
    "    f = image.read()\n",
    "    b = bytearray(f)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 628,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'prediction': [[143.0, 0.01736793853342533, 0.08603569865226746, 0.3176596164703369, 0.9304459095001221, 0.7965518236160278], [78.0, 0.014312251470983028, 0.08645617961883545, 0.32715365290641785, 0.8999919295310974, 0.8453741073608398], [166.0, 0.012265237979590893, 0.09959641098976135, 0.3081730306148529, 0.9037302732467651, 0.8454580307006836], [15.0, 0.01095516700297594, 0.08709743618965149, 0.3082030415534973, 0.9004162549972534, 0.8249209523200989], [100.0, 0.010520832613110542, 0.09588846564292908, 0.32046806812286377, 0.8894931077957153, 0.8455023765563965]]}\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    " \n",
    "object_detector.content_type = 'image/jpeg'\n",
    "detections = json.loads(results)\n",
    "print (detections)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "AWS have provided additional script to easily visualize the detection outputs. You can visulize the high-confidence preditions with bounding box by filtering out low-confidence detections using the script below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 633,
   "metadata": {},
   "outputs": [],
   "source": [
    "def visualize_detection(img_file, dets, classes=[], thresh=0.6):    \n",
    "        import random\n",
    "        import matplotlib.pyplot as plt\n",
    "        import matplotlib.image as mpimg\n",
    "\n",
    "        img=mpimg.imread(img_file)\n",
    "        plt.imshow(img)\n",
    "        height = img.shape[0]\n",
    "        width = img.shape[1]\n",
    "        colors = dict()\n",
    "        for det in dets:\n",
    "            (klass, score, x0, y0, x1, y1) = det\n",
    "            if score < thresh:\n",
    "                continue\n",
    "            cls_id = int(klass)\n",
    "            if cls_id not in colors:\n",
    "                colors[cls_id] = (random.random(), random.random(), random.random())\n",
    "            xmin = int(x0 * width)\n",
    "            ymin = int(y0 * height)\n",
    "            xmax = int(x1 * width)\n",
    "            ymax = int(y1 * height)\n",
    "            rect = plt.Rectangle((xmin, ymin), xmax - xmin,\n",
    "                                 ymax - ymin, fill=False,\n",
    "                                 edgecolor=colors[cls_id],\n",
    "                                 linewidth=3.5)\n",
    "            plt.gca().add_patch(rect)\n",
    "            class_name = str(cls_id)\n",
    "            if classes and len(classes) > cls_id:\n",
    "                class_name = classes[cls_id]\n",
    "                print(class_name)\n",
    "            plt.gca().text(xmin, ymin - 2,\n",
    "                            '{:s} {:.3f}'.format(class_name, score),\n",
    "                            bbox=dict(facecolor=colors[cls_id], alpha=0.5),\n",
    "                                    fontsize=12, color='white')\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 634,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jaguar XK XKR 2012\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "threshold = 0.1\n",
    "\n",
    "visualize_detection(\"car.jpg\", detections['prediction'], categories, threshold)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Delete the Endpoint\n",
    "You can to remove the deployed endpoint by using script below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sagemaker.Session().delete_endpoint(object_detector.endpoint)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
